{"version":3,"sources":["webpack:///webpack/bootstrap 3ea55549c88dfaf7fb24","webpack:///./src/test/apps/component-one.html","webpack:///./node_modules/polymer-webpack-loader/register-html-template.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","Polymer","is","properties","pressed","type","Boolean","notify","reflectToAttribute","value","toggleIcon","String","listeners","tap","toggle","this","[object Object]","val","content","template","document","createElement","innerHTML","createDocumentFragment","firstChild","appendChild","importNode","trimmedVal","trim","div","body","insertBefore","addEventListener"],"mappings":"aACA,IAAAA,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,IACAG,EAAAH,EACAI,GAAA,EACAH,YAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAZ,EAAAmB,EAAA,SAAAhB,GACA,IAAAS,EAAAT,KAAAiB,WACA,WAA2B,OAAAjB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAQ,EAAAC,GAAsD,OAAAR,OAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDtB,EAAAyB,EAAA,GAGAzB,IAAA0B,EAAA,ilBChCSC,SACHC,GAAe,cACPC,YACDC,SACDC,KAASC,QACPC,QAAM,EACMC,oBAAM,EACnBC,OACN,GACSC,YACJL,KAEPM,SACQC,WACFC,IACN,UACKC,OAAW,WACXC,KAASX,SAAOW,KACtBX,wDCKJ3B,EAAAD,cAvCAwC,gBAAAC,GACA,IAAAC,EACA,MAAAC,EAAAC,SAAAC,cAAA,YAEA,GADAF,EAAAG,UAAAL,EACAE,EAAAD,QACAA,EAAAC,EAAAD,aAGA,IADAA,EAAAE,SAAAG,yBACAJ,EAAAK,YACAN,EAAAO,YAAAN,EAAAK,YAGAJ,SAAAM,WAAAR,GAAA,GASAF,cAAAC,GACA,MAAAU,EAAAV,EAAAW,OACA,GAAAD,EAAA,CACA,MAAAE,EAAAT,SAAAC,cAAA,OACAQ,EAAAP,UAAAK,EACAE,EAAAL,aACAJ,SAAAU,KACAV,SAAAU,KAAAC,aAAAF,EAAAL,WAAAJ,SAAAU,KAAAN,YAEAJ,SAAAY,iBAAA,wBACAZ,SAAAU,KAAAC,aAAAF,EAAAL,WAAAJ,SAAAU,KAAAN","file":"component-one.html.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 3ea55549c88dfaf7fb24","<!-- from https://github.com/googlecodelabs/polymer-first-elements/blob/master/icon-toggle-finished/icon-toggle.html -->\n<link rel=\"import\" href=\"./polymer/polymer.html\">\n<!-- link rel=\"import\" href=\"../iron-icon/iron-icon.html\" -->\n\n<dom-module id=\"icon-toggle\">\n\n\n  <template>\n\n    <style>\n      :host {\n        display: inline-block;\n      }\n      iron-icon {\n        fill: var(--icon-toggle-color, rgba(0,0,0,0));\n        stroke: var(--icon-toggle-outline-color, currentcolor);\n      }\n      :host([pressed]) iron-icon {\n        fill: var(--icon-toggle-pressed-color, currentcolor);\n      }    \n    </style>\n    \n    <!-- local DOM goes here -->\n    <iron-icon icon=\"[[toggleIcon]]\">\n    </iron-icon>\n\n  </template>\n\n  <script>\n  Polymer({\n    is: 'icon-toggle',\n    properties: {\n      pressed: {\n        type: Boolean,\n        notify: true,\n        reflectToAttribute: true,\n        value: false\n      },\n      toggleIcon: {\n        type: String\n      }\n    },\n    listeners: {\n      \"tap\": \"toggle\"\n    },   \n    toggle: function() {\n      this.pressed = !this.pressed;\n    }\n  });\n  </script>\n\n</dom-module>\n\n\n\n// WEBPACK FOOTER //\n// ./src/test/apps/component-one.html","/* eslint-env browser */\n\nclass RegisterHtmlTemplate {\n  /**\n   * Create a `<template>` element to hold `<dom-module>` content.\n   * This bit of code will execute in the context of the main document,\n   * calling `importNode` on the `<template>`, which in turn triggers\n   * the lifecycle of the `<dom-module>` and allows it to insert its\n   * content into Polymer's global module map. When a Polymer element\n   * boots up it will fetch its template from this module map.\n   * https://github.com/Polymer/polymer/blob/master/lib/mixins/element-mixin.html#L501-L538\n   * @param {string} val A `<dom-module>` as an HTML string\n   */\n  static register(val) {\n    let content;\n    const template = document.createElement('template');\n    template.innerHTML = val;\n    if (template.content) {\n      content = template.content; // eslint-disable-line prefer-destructuring\n    } else {\n      content = document.createDocumentFragment();\n      while (template.firstChild) {\n        content.appendChild(template.firstChild);\n      }\n    }\n    document.importNode(content, true);\n  }\n  /**\n   * Content that will be injected into the main document. This is primarily\n   * for things like `<iron-iconset>` and `<custom-style>` which do not have\n   * templates but rely on HTML Imports ability to apply content to the main\n   * document.\n   * @param {string} val An HTML string\n   */\n  static toBody(val) {\n    const trimmedVal = val.trim();\n    if (trimmedVal) {\n      const div = document.createElement('div');\n      div.innerHTML = trimmedVal;\n      if (div.firstChild) {\n        if (document.body) {\n          document.body.insertBefore(div.firstChild, document.body.firstChild);\n        } else {\n          document.addEventListener('DOMContentLoaded', () => {\n            document.body.insertBefore(div.firstChild, document.body.firstChild);\n          });\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = RegisterHtmlTemplate;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/polymer-webpack-loader/register-html-template.js\n// module id = 2\n// module chunks = 0"],"sourceRoot":""}